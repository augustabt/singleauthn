<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <title>SingleAuthN</title>
  </head>

  <body>
    <h1>SingleAuthN Authenticator Registration</h1>
    <br>
    <button onclick="registerUser()">Register New Authenticator</button>

    <script>
      function bufferDecode(value) {
        return Uint8Array.from(atob(value), c => c.charCodeAt(0));
      }

      function bufferEncode(value) {
        return btoa(String.fromCharCode.apply(null, new Uint8Array(value)))
          .replace(/\+/g, "-")
          .replace(/\//g, "_")
          .replace(/=/g, "");;
      }

      function parseCredentialCreationOptions(credentialCreationOptions) {
        credentialCreationOptions.publicKey.challenge = bufferDecode(credentialCreationOptions.publicKey.challenge);
        credentialCreationOptions.publicKey.user.id = bufferDecode(credentialCreationOptions.publicKey.user.id);
        if (credentialCreationOptions.publicKey.excludeCredentials) {
          for (var i = 0; i < credentialCreationOptions.publicKey.excludeCredentials.length; i++) {
            credentialCreationOptions.publicKey.excludeCredentials[i].id = bufferDecode(credentialCreationOptions.publicKey.excludeCredentials[i].id);
          }
        }

        return credentialCreationOptions;
      }

      function credentialToJson(newCredential) {
        const attestationObject = newCredential.response.attestationObject;
        const clientDataJSON = newCredential.response.clientDataJSON;
        const rawId = newCredential.rawId;

        return JSON.stringify({
          id: newCredential.id,
          rawId: bufferEncode(rawId),
          type: newCredential.type,
          response: {
            attestationObject: bufferEncode(attestationObject),
            clientDataJSON: bufferEncode(clientDataJSON),
          },
        });
      }

      async function registerUser() {
        const beginRegistrationResponse = await fetch('/registration/start');
        let credentialCreationOptions = await beginRegistrationResponse.json();
        credentialCreationOptions = parseCredentialCreationOptions(credentialCreationOptions);

        let newCredential = await navigator.credentials.create(credentialCreationOptions);
        const credentialJson = credentialToJson(newCredential);
        const finishRegistrationResponse = await fetch('/registration/finish', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: credentialJson,
        });
      }
    </script>
  </body>
</html>